open HolKernel Parse boolLib bossLib helper_tactics;
open access_propertiesTheory;

val _ = new_theory "access_properties_lemmas";

Theorem EQ_PENDING_ACCESSES_IMPLIES_PENDING_ACCESSES_UNMODIFIED_FETCHING_BD_LEMMA:
!channel1 channel2.
  channel2.pending_accesses = channel1.pending_accesses
  ==>
  PENDING_ACCESSES_UNMODIFIED_FETCHING_BD channel1 channel2
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNMODIFIED_FETCHING_BD THEN
STAC
QED

Theorem ID_PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA_LEMMA:
!R W memory channel.
  PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA R W memory channel channel
Proof
REWRITE_TAC [PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA] THEN
REWRITE_TAC [PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA]
QED







Theorem PENDING_ACCESSES_UNEXPANDED_FETCHING_BD_TRANSITIVITY_LEMMA:
!channel1 channel2 channel3.
  PENDING_ACCESSES_UNEXPANDED_FETCHING_BD channel1 channel2 /\
  PENDING_ACCESSES_UNEXPANDED_FETCHING_BD channel2 channel3
  ==>
  PENDING_ACCESSES_UNEXPANDED_FETCHING_BD channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNEXPANDED_FETCHING_BD THEN
INTRO_TAC THEN
ASM_INST_IMP_ASM_TAC THEN
ASM_INST_IMP_ASM_TAC THEN
STAC
QED










(***********TRANSFERRING_DATA TRANSITIVITY***********************)

Theorem PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA_TRANSITIVTY_LEMMA:
!channel1 channel2 channel3.
  PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA channel1 channel2 /\
  PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA channel2 channel3
  ==>
  PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA THEN
STAC
QED

Theorem PENDING_ACCESSES_UNEXPANDED_CONDITIONALLY_EXPANDED_IMPLIES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_LEMMA:
!R W memory channel1 channel2 channel3.
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel1 channel2 /\
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel2 channel3
  ==>
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA THEN
INTRO_TAC THEN
AITAC THEN
SPLIT_ASM_DISJS_TAC THENL
[
 ETAC PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA THEN
 AITAC THEN
 STAC
 ,
 STAC
]
QED

Theorem PENDING_ACCESSES_CONDITIONALLY_EXPANDED_UNEXPANDED_IMPLIES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_LEMMA:
!R W memory channel1 channel2 channel3.
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel1 channel2 /\
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel2 channel3
  ==>
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA THEN
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA THEN
FAIRTAC THEN
FAIRTAC THEN
STAC
QED

Theorem PENDING_ACCESSES_UNMODIFIED_CONDITIONALLY_EXPANDED_IMPLIES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_LEMMA:
!R W memory channel1 channel2 channel3.
  PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA channel1 channel2 /\
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel2 channel3
  ==>
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA THEN
ETAC PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA THEN
STAC
QED

Theorem PENDING_ACCESSES_CONDITIONALLY_EXPANDED_UNMODIFIED_IMPLIES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_LEMMA:
!R W memory channel1 channel2 channel3.
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel1 channel2 /\
  PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA channel2 channel3
  ==>
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA THEN
ETAC PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA THEN
STAC
QED

Theorem PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_TRANSITIVITY_LEMMA:
!R W memory channel1 channel2 channel3.
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel1 channel2 /\
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel2 channel3
  ==>
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA R W memory channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA THEN
INTRO_TAC THEN
FAIRTAC THEN
SPLIT_ASM_DISJS_TAC THENL
[
 FAIRTAC THEN STAC
 ,
 STAC
]
QED

Theorem PENDING_ACCESSES_UNEXPANDED_UNMODIFIED_IMPLIES_UNEXPANDED_TRANSFERRING_DATA_LEMMA:
!channel1 channel2 channel3.
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel1 channel2 /\
  PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA channel2 channel3
  ==>
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA THEN
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA THEN
AITAC THEN
STAC
QED

Theorem PENDING_ACCESSES_UNMODIFIED_UNEXPANDED_IMPLIES_UNEXPANDED_TRANSFERRING_DATA_LEMMA:
!channel1 channel2 channel3.
  PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA channel1 channel2 /\
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel2 channel3
  ==>
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA THEN
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA THEN
AITAC THEN
STAC
QED

Theorem PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA_TRANSITIVITY_LEMMA:
!channel1 channel2 channel3.
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel1 channel2 /\
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel2 channel3
  ==>
  PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA THEN
INTRO_TAC THEN
ASM_INST_IMP_ASM_TAC THEN
ASM_INST_IMP_ASM_TAC THEN
STAC
QED

Theorem PENDING_ACCESSES_RESTRICTED_ACCESSES_TRANSFERRING_DATA_TRANSITIVITY_LEMMA:
!R W memory channel1 channel2 channel3.
  PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA R W memory channel1 channel2 /\
  PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA R W memory channel2 channel3
  ==>
  PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA R W memory channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA THEN
SPLIT_ASM_DISJS_TAC THENL
[
 FITAC PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA_TRANSITIVTY_LEMMA THEN STAC
 ,
 FITAC PENDING_ACCESSES_UNMODIFIED_UNEXPANDED_IMPLIES_UNEXPANDED_TRANSFERRING_DATA_LEMMA THEN STAC
 ,
 FITAC PENDING_ACCESSES_UNMODIFIED_CONDITIONALLY_EXPANDED_IMPLIES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_LEMMA THEN STAC
 ,
 FITAC PENDING_ACCESSES_UNEXPANDED_UNMODIFIED_IMPLIES_UNEXPANDED_TRANSFERRING_DATA_LEMMA THEN STAC
 ,
 FITAC PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA_TRANSITIVITY_LEMMA THEN STAC
 ,
 FITAC PENDING_ACCESSES_UNEXPANDED_CONDITIONALLY_EXPANDED_IMPLIES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_LEMMA THEN STAC
 ,
 FITAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_UNMODIFIED_IMPLIES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_LEMMA THEN STAC
 ,
 FITAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_UNEXPANDED_IMPLIES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_LEMMA THEN STAC
 ,
 FITAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_TRANSFERRING_DATA_TRANSITIVITY_LEMMA THEN STAC
]
QED

Theorem PENDING_ACCESSES_UNEXPANDED_UPDATING_BD_TRANSITIVITY_LEMMA:
!channel1 channel2 channel3.
  PENDING_ACCESSES_UNEXPANDED_UPDATING_BD channel1 channel2 /\
  PENDING_ACCESSES_UNEXPANDED_UPDATING_BD channel2 channel3
  ==>
  PENDING_ACCESSES_UNEXPANDED_UPDATING_BD channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNEXPANDED_UPDATING_BD THEN
INTRO_TAC THEN
ASM_INST_IMP_ASM_TAC THEN
ASM_INST_IMP_ASM_TAC THEN
STAC
QED

Theorem PENDING_ACCESSES_UNEXPANDED_WRITING_BACK_BD_TRANSITIVITY_LEMMA:
!channel1 channel2 channel3.
  PENDING_ACCESSES_UNEXPANDED_WRITING_BACK_BD channel1 channel2 /\
  PENDING_ACCESSES_UNEXPANDED_WRITING_BACK_BD channel2 channel3
  ==>
  PENDING_ACCESSES_UNEXPANDED_WRITING_BACK_BD channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNEXPANDED_WRITING_BACK_BD THEN
INTRO_TAC THEN
ASM_INST_IMP_ASM_TAC THEN
ASM_INST_IMP_ASM_TAC THEN
STAC
QED

Theorem PENDING_ACCESSES_UNEXPANDED_TRANSITIVITY_LEMMA:
!channel1 channel2 channel3.
  PENDING_ACCESSES_UNEXPANDED channel1 channel2 /\
  PENDING_ACCESSES_UNEXPANDED channel2 channel3
  ==>
  PENDING_ACCESSES_UNEXPANDED channel1 channel3
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_UNEXPANDED THEN
ITAC PENDING_ACCESSES_UNEXPANDED_FETCHING_BD_TRANSITIVITY_LEMMA THEN
ITAC PENDING_ACCESSES_UNEXPANDED_UPDATING_BD_TRANSITIVITY_LEMMA THEN
ITAC PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA_TRANSITIVITY_LEMMA THEN
ITAC PENDING_ACCESSES_UNEXPANDED_WRITING_BACK_BD_TRANSITIVITY_LEMMA THEN
STAC
QED

Theorem PENDING_ACCESSES_UNEXPANDED_IMPLIES_RESTRICTED_LEMMA:
!channel1 channel2.
  PENDING_ACCESSES_UNEXPANDED channel1 channel2
  ==>
  !R W memory. PENDING_ACCESSES_RESTRICTED R W memory channel1 channel2
Proof
INTRO_TAC THEN
REPEAT GEN_TAC THEN
REWRITE_TAC [PENDING_ACCESSES_RESTRICTED] THEN
REWRITE_TAC [PENDING_ACCESSES_RESTRICTED_FETCHING_BD] THEN
REWRITE_TAC [PENDING_ACCESSES_RESTRICTED_UPDATING_BD] THEN
REWRITE_TAC [PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA] THEN
REWRITE_TAC [PENDING_ACCESSES_RESTRICTED_WRITING_BACK_BD] THEN
ETAC PENDING_ACCESSES_UNEXPANDED THEN
STAC
QED

Theorem EQ_PENDING_ACCESSES_IMPLIES_PENDING_ACCESSES_UNEXPANDED_LEMMA:
!channel1 channel2.
  channel2.pending_accesses = channel1.pending_accesses
  ==>
  PENDING_ACCESSES_UNEXPANDED channel1 channel2
Proof
INTRO_TAC THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED] THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED_FETCHING_BD] THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED_UPDATING_BD] THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA] THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED_WRITING_BACK_BD] THEN
STAC
QED

Theorem REFL_PENDING_ACCESSES_UNEXPANDED_LEMMA:
!channel.
  PENDING_ACCESSES_UNEXPANDED channel channel
Proof
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED] THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED_FETCHING_BD] THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED_UPDATING_BD] THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED_TRANSFERRING_DATA] THEN
REWRITE_TAC [PENDING_ACCESSES_UNEXPANDED_WRITING_BACK_BD]
QED







Theorem EQ_REQUESTS_IMPLIES_PENDING_ACCESSES_RESTRICTED_FETCHING_BD_LEMMA:
!R W memory channel1 channel2.
  channel1.pending_accesses.requests.fetching_bd = channel2.pending_accesses.requests.fetching_bd
  ==>
  PENDING_ACCESSES_RESTRICTED_FETCHING_BD R W memory channel1 channel2
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_RESTRICTED_FETCHING_BD THEN
ETAC PENDING_ACCESSES_UNMODIFIED_FETCHING_BD THEN
STAC
QED

Theorem EQ_REQUESTS_IMPLIES_PENDING_ACCESSES_RESTRICTED_UPDATING_BD_LEMMA:
!R W memory channel1 channel2.
  channel1.pending_accesses.requests.updating_bd = channel2.pending_accesses.requests.updating_bd
  ==>
  PENDING_ACCESSES_RESTRICTED_UPDATING_BD R W memory channel1 channel2
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_RESTRICTED_UPDATING_BD THEN
ETAC PENDING_ACCESSES_UNMODIFIED_UPDATING_BD THEN
STAC
QED

Theorem EQ_REQUESTS_IMPLIES_PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA_LEMMA:
!R W memory channel1 channel2.
  channel1.pending_accesses.requests.transferring_data = channel2.pending_accesses.requests.transferring_data
  ==>
  PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA R W memory channel1 channel2
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA THEN
ETAC PENDING_ACCESSES_UNMODIFIED_TRANSFERRING_DATA THEN
STAC
QED

Theorem EQ_REQUESTS_IMPLIES_PENDING_ACCESSES_RESTRICTED_WRITING_BACK_BD_LEMMA:
!R W memory channel1 channel2.
  channel1.pending_accesses.requests.writing_back_bd = channel2.pending_accesses.requests.writing_back_bd
  ==>
  PENDING_ACCESSES_RESTRICTED_WRITING_BACK_BD R W memory channel1 channel2
Proof
INTRO_TAC THEN
ETAC PENDING_ACCESSES_RESTRICTED_WRITING_BACK_BD THEN
ETAC PENDING_ACCESSES_UNMODIFIED_WRITING_BACK_BD THEN
STAC
QED

Theorem EQ_PENDING_ACCESSES_IMPLIES_PENDING_ACCESSES_RESTRICTED_LEMMA:
!R W memory channel1 channel2.
  channel2.pending_accesses = channel1.pending_accesses
  ==>
  PENDING_ACCESSES_RESTRICTED R W memory channel1 channel2
Proof
INTRO_TAC THEN
PTAC PENDING_ACCESSES_RESTRICTED THEN
IRTAC state_lemmasTheory.EQ_PENDING_ACCESSES_IMP_EQ_PENDING_ACCESSES_REQUESTS_ALL_OPERATIONS_LEMMA THEN
ITAC EQ_REQUESTS_IMPLIES_PENDING_ACCESSES_RESTRICTED_FETCHING_BD_LEMMA THEN
ITAC EQ_REQUESTS_IMPLIES_PENDING_ACCESSES_RESTRICTED_UPDATING_BD_LEMMA THEN
ITAC EQ_REQUESTS_IMPLIES_PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA_LEMMA THEN
ITAC EQ_REQUESTS_IMPLIES_PENDING_ACCESSES_RESTRICTED_WRITING_BACK_BD_LEMMA THEN
STAC
QED

Theorem ALL_DMA_CHANNELS_EQ_PENDING_ACCESSES_IMPLIES_PENDING_ACCESSES_RESTRICTED_LEMMA:
!(device1 : ('bd_type, 'channel_index_width, 'function_state_type, 'interconnect_address_width, 'internal_state_type, 'tag_width) device_state_type) (device2 : ('bd_type, 'channel_index_width, 'function_state_type, 'interconnect_address_width, 'internal_state_type, 'tag_width) device_state_type).
  (!channel_id. (schannel device2 channel_id).pending_accesses = (schannel device1 channel_id).pending_accesses)
  ==>
  !R W memory channel_id.
    PENDING_ACCESSES_RESTRICTED R W memory (schannel device1 channel_id) (schannel device2 channel_id)
Proof
INTRO_TAC THEN
REPEAT GEN_TAC THEN
MATCH_MP_TAC EQ_PENDING_ACCESSES_IMPLIES_PENDING_ACCESSES_RESTRICTED_LEMMA THEN
STAC
QED





Theorem REQUEST_MEMBERS_R_W_READABLE_WRITABLE_LEMMA:
!R W memory requests.
  (!addresses tag. MEM (request_read addresses tag) requests ==> EVERY (R memory) addresses) /\
  (!address_bytes tag. MEM (request_write address_bytes tag) requests ==> EVERY (W memory) (MAP FST address_bytes))
  ==>
  READABLE_WRITABLE R W memory requests
Proof
Induct_on ‘requests’ THENL
[
 REWRITE_TAC [READABLE_WRITABLE]
 ,
 INTRO_TAC THEN
 PTAC READABLE_WRITABLE THEN
 (CONJ_TAC THENL
 [
  INST_IMP_ASM_GOAL_TAC THEN
  ASM_REWRITE_TAC [listTheory.MEM]
  ,
  INST_IMP_ASM_GOAL_TAC THEN
  CONJ_TAC THEN
  INTRO_TAC THEN
  RW_HYPS_TAC listTheory.MEM THEN
  INST_IMP_ASM_GOAL_TAC THEN
  STAC
 ])
]
QED

Theorem READABLE_WRITABLE_REQUEST_MEMBERS_R_LEMMA:
!R W memory requests.
  READABLE_WRITABLE R W memory requests
  ==>
  (!addresses     tag. MEM (request_read  addresses     tag) requests ==> EVERY (R memory) addresses)
Proof
Induct_on ‘requests’ THENL
[
 REWRITE_TAC [READABLE_WRITABLE, listTheory.MEM]
 ,
 INTRO_TAC THEN
 PTAC READABLE_WRITABLE THENL
 [
  INTRO_TAC THEN
  RW_HYPS_TAC listTheory.MEM THEN
  SPLIT_ASM_DISJS_TAC THENL
  [
   LRTAC THEN RW_HYPS_TAC stateTheory.interconnect_request_type_11 THEN STAC
   ,
   AITAC THEN AITAC THEN STAC
  ]
  ,
  INTRO_TAC THEN
  RW_HYPS_TAC listTheory.MEM THEN
  SPLIT_ASM_DISJS_TAC THENL
  [
   LRTAC THEN RW_HYPS_TAC stateTheory.interconnect_request_type_distinct THEN SOLVE_F_ASM_TAC
   ,
   AITAC THEN FAITAC THEN STAC
  ]
 ]
]
QED

Theorem READABLE_WRITABLE_REQUEST_MEMBERS_W_LEMMA:
!R W memory requests.
  READABLE_WRITABLE R W memory requests
  ==>
  (!address_bytes tag. MEM (request_write address_bytes tag) requests ==> EVERY (W memory) (MAP FST address_bytes))
Proof
Induct_on ‘requests’ THENL
[
 REWRITE_TAC [READABLE_WRITABLE, listTheory.MEM]
 ,
 INTRO_TAC THEN
 PTAC READABLE_WRITABLE THENL
 [
  INTRO_TAC THEN
  RW_HYPS_TAC listTheory.MEM THEN
  SPLIT_ASM_DISJS_TAC THENL
  [
   LRTAC THEN RW_HYPS_TAC stateTheory.interconnect_request_type_distinct THEN SOLVE_F_ASM_TAC
   ,
   AITAC THEN AITAC THEN STAC
  ]
  ,
  INTRO_TAC THEN
  RW_HYPS_TAC listTheory.MEM THEN
  SPLIT_ASM_DISJS_TAC THENL
  [
   LRTAC THEN RW_HYPS_TAC stateTheory.interconnect_request_type_11 THEN STAC
   ,
   AITAC THEN FAITAC THEN STAC
  ]
 ]
]
QED

Theorem READABLE_WRITABLE_REQUEST_MEMBERS_R_W_LEMMA:
!R W memory requests.
  READABLE_WRITABLE R W memory requests
  ==>
  (!addresses     tag. MEM (request_read  addresses     tag) requests ==> EVERY (R memory) addresses) /\
  (!address_bytes tag. MEM (request_write address_bytes tag) requests ==> EVERY (W memory) (MAP FST address_bytes))
Proof
INTRO_TAC THEN
ITAC READABLE_WRITABLE_REQUEST_MEMBERS_R_LEMMA THEN
ITAC READABLE_WRITABLE_REQUEST_MEMBERS_W_LEMMA THEN
STAC
QED

Theorem READABLE_WRITABLE_EQ_REQUEST_MEMBERS_R_W_LEMMA:
!R W memory requests.
  READABLE_WRITABLE R W memory requests
  =
  ((!addresses     tag. MEM (request_read  addresses     tag) requests ==> EVERY (R memory) addresses) /\
   (!address_bytes tag. MEM (request_write address_bytes tag) requests ==> EVERY (W memory) (MAP FST address_bytes)))
Proof
REPEAT GEN_TAC THEN
EQ_TAC THENL
[
 INTRO_TAC THEN
 ITAC READABLE_WRITABLE_REQUEST_MEMBERS_R_W_LEMMA THEN
 STAC
 ,
 INTRO_TAC THEN
 ITAC REQUEST_MEMBERS_R_W_READABLE_WRITABLE_LEMMA THEN
 STAC
]
QED

Theorem READABLE_WRITABLE_REQUEST_SATISFIES_R_W_CONDITION_LEMMA:
!R W memory requests request.
  READABLE_WRITABLE R W memory requests /\
  MEM request requests
  ==>
  REQUEST_CONDITION_R_W R W memory request
Proof
INTRO_TAC THEN
PTAC READABLE_WRITABLE_EQ_REQUEST_MEMBERS_R_W_LEMMA THEN
Cases_on ‘request’ THEN
REWRITE_TAC [REQUEST_CONDITION_R_W, REQUEST_CONDITION_R, REQUEST_CONDITION_W] THEN
FAITAC THEN
STAC
QED

val _ = export_theory();

