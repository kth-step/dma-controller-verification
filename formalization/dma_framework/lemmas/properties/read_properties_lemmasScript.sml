open HolKernel Parse boolLib bossLib helper_tactics;
open operationsTheory read_propertiesTheory write_propertiesTheory access_propertiesTheory;

val _ = new_theory "read_properties_lemmas";

Theorem UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel addresses tag.
  UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  MEM (request_read addresses tag) channel.pending_accesses.requests.updating_bd
  ==>
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
PTAC UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
INST_IMP_ASM_TAC THEN
STAC
QED

Theorem TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel addresses tag.
  TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  MEM (request_read addresses tag) channel.pending_accesses.requests.transferring_data
  ==>
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
PTAC TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES THEN
INST_IMP_ASM_TAC THEN
STAC
QED
   
Theorem WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel addresses tag.
  WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  MEM (request_read addresses tag) channel.pending_accesses.requests.writing_back_bd
  ==>
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
PTAC WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
INST_IMP_ASM_TAC THEN
STAC
QED

Theorem FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel addresses tag.
  FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  MEM (request_read addresses tag) (collect_pending_fetch_bd_request channel.pending_accesses.requests.fetching_bd)
  ==>
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
PTAC FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
PTAC collect_pending_fetch_bd_request THENL
[
 ETAC listTheory.MEM THEN
 SOLVE_F_ASM_TAC
 ,
 ETAC listTheory.MEM THEN
 REMOVE_F_DISJUNCTS_TAC THEN
 INST_IMP_ASM_GOAL_TAC THEN
 STAC
]
QED

Theorem OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel.
  FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
  ==>
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
Proof
INTRO_TAC THEN
PTAC CHANNEL_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC channel_pending_requests THEN
ETAC listTheory.MEM_APPEND THEN
REPEAT SPLIT_ASM_DISJS_TAC THENL
[
 IRTAC FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN STAC
 ,
 IRTAC UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN STAC
 ,
 IRTAC TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN STAC
 ,
 IRTAC WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN STAC
]
QED



Theorem EQUAL_FETCHING_BD_REQUESTS_PRESERVES_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel1 channel2.
  channel2.pending_accesses.requests.fetching_bd = channel1.pending_accesses.requests.fetching_bd /\
  FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel1
  ==>
  FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel2
Proof
INTRO_TAC THEN
ETAC FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
STAC
QED

Theorem EQUAL_UPDATING_BD_REQUESTS_PRESERVES_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel1 channel2.
  channel2.pending_accesses.requests.updating_bd = channel1.pending_accesses.requests.updating_bd /\
  UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel1
  ==>
  UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel2
Proof
INTRO_TAC THEN
ETAC UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
STAC
QED

Theorem EQUAL_TRANSFERRING_DATA_REQUESTS_PRESERVES_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel1 channel2.
  channel2.pending_accesses.requests.transferring_data = channel1.pending_accesses.requests.transferring_data /\
  TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel1
  ==>
  TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel2
Proof
INTRO_TAC THEN
ETAC TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES THEN
STAC
QED

Theorem EQUAL_WRITING_BACK_BD_REQUESTS_PRESERVES_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel1 channel2.
  channel2.pending_accesses.requests.writing_back_bd = channel1.pending_accesses.requests.writing_back_bd /\
  WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel1
  ==>
  WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel2
Proof
INTRO_TAC THEN
ETAC WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
STAC
QED

Theorem CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
  ==>
  FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
Proof
INTRO_TAC THEN
PTAC FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
PTAC CHANNEL_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC channel_pending_requests THEN
INST_IMP_ASM_GOAL_TAC THEN
RLTAC THEN
PTAC collect_pending_fetch_bd_request THEN
REWRITE_TAC [listTheory.MEM_APPEND] THEN
REWRITE_TAC [listTheory.MEM]
QED

Theorem CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_UPDATIING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
  ==>
  UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
Proof
INTRO_TAC THEN
PTAC UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC CHANNEL_REQUESTING_READ_ADDRESSES THEN
PTAC channel_pending_requests THEN
INST_IMP_ASM_GOAL_TAC THEN
REWRITE_TAC [listTheory.MEM_APPEND] THEN
STAC
QED

Theorem CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
  ==>
  TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
Proof
INTRO_TAC THEN
PTAC TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC CHANNEL_REQUESTING_READ_ADDRESSES THEN
PTAC channel_pending_requests THEN
INST_IMP_ASM_GOAL_TAC THEN
REWRITE_TAC [listTheory.MEM_APPEND] THEN
STAC
QED

Theorem CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
  ==>
  WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
Proof
INTRO_TAC THEN
PTAC WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC CHANNEL_REQUESTING_READ_ADDRESSES THEN
PTAC channel_pending_requests THEN
INST_IMP_ASM_GOAL_TAC THEN
REWRITE_TAC [listTheory.MEM_APPEND] THEN
STAC
QED

Theorem CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
  ==>
  FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
Proof
INTRO_TAC THEN
ITAC CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
ITAC CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_UPDATIING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
ITAC CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
IRTAC CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
STAC
QED

Theorem CHANNEL_REQUESTING_READ_ADDRESSES_EQ_OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
  =
  (FETCHING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
   UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
   TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
   WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel)
Proof
REPEAT GEN_TAC THEN
EQ_TAC THENL
[
 REWRITE_TAC [CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA]
 ,
 REWRITE_TAC [OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA]
]
QED



Theorem EQUAL_PENDING_REQUESTS_PRESERVES_FETCHING_BD_READ_REQUESTS_ONLY_LEMMA:
!channel1 channel2.
  channel2.pending_accesses.requests = channel1.pending_accesses.requests /\
  FETCHING_BD_READ_REQUESTS_ONLY channel1
  ==>
  FETCHING_BD_READ_REQUESTS_ONLY channel2
Proof
INTRO_TAC THEN
ETAC FETCHING_BD_READ_REQUESTS_ONLY THEN
STAC
QED






Theorem UPDATING_BD_WRITE_REQUESTS_ONLY_IMPLIES_UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory channel.
  UPDATING_BD_WRITE_REQUESTS_ONLY channel
  ==>
  UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES R memory channel
Proof
INTRO_TAC THEN
PTAC UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC UPDATING_BD_WRITE_REQUESTS_ONLY THEN
AIRTAC THEN
AXTAC THEN
IRTAC stateTheory.interconnect_request_type_distinct THEN
SOLVE_F_ASM_TAC
QED






Theorem CHANNEL_REQESTING_READ_ADDRESSES_IMPLIES_UPDATING_BD_REQEUSTS_READ_ADDRESSES_LEMMA:
!R memory channel addresses tag.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  MEM (request_read addresses tag) channel.pending_accesses.requests.updating_bd
  ==>
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
RW_HYP_LEMMA_TAC CHANNEL_REQUESTING_READ_ADDRESSES_EQ_OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
IRTAC UPDATING_BD_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
STAC
QED

Theorem CHANNEL_REQESTING_READ_ADDRESSES_IMPLIES_TRANSFERRING_DATA_REQEUSTS_READ_ADDRESSES_LEMMA:
!R memory channel addresses tag.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  MEM (request_read addresses tag) channel.pending_accesses.requests.transferring_data
  ==>
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
RW_HYP_LEMMA_TAC CHANNEL_REQUESTING_READ_ADDRESSES_EQ_OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
IRTAC TRANSFERRING_DATA_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
STAC
QED

Theorem CHANNEL_REQESTING_READ_ADDRESSES_IMPLIES_WRITING_BACK_BD_REQEUSTS_READ_ADDRESSES_LEMMA:
!R memory channel addresses tag.
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel /\
  MEM (request_read addresses tag) channel.pending_accesses.requests.writing_back_bd
  ==>
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
RW_HYP_LEMMA_TAC CHANNEL_REQUESTING_READ_ADDRESSES_EQ_OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
IRTAC WRITING_BACK_BD_CHANNEL_REQUESTING_READ_ADDRESSES_IMPLY_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
STAC
QED

Theorem REGISTER_REQUESTING_READ_ADDRESSES_IMPLIES_READABLE_REQUEST_LEMMA:
!device_characteristics memory device addresses tag.
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device /\
  MEM (request_read addresses tag) device.dma_state.pending_register_related_memory_requests
  ==>
  EVERY (device_characteristics.dma_characteristics.R memory) addresses
Proof
INTRO_TAC THEN
PTAC REGISTER_REQUESTING_READ_ADDRESSES THEN
AITAC THEN
STAC
QED

Theorem EQ_PENDING_REGIESTER_RELATED_MEMORY_REQUESTS_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA:
!device_characteristics memory device1 device2.
  device2.dma_state.pending_register_related_memory_requests = device1.dma_state.pending_register_related_memory_requests /\
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device1
  ==>
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device2
Proof
INTRO_TAC THEN
ETAC REGISTER_REQUESTING_READ_ADDRESSES THEN
STAC
QED

Theorem PENDING_ACCESSES_UNMODIFIED_REGISTER_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA:
!device_characteristics memory device1 device2.
  PENDING_ACCESSES_UNMODIFIED_REGISTER device1 device2 /\
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device1
  ==>
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device2
Proof
INTRO_TAC THEN
ETAC REGISTER_REQUESTING_READ_ADDRESSES THEN
PTAC PENDING_ACCESSES_UNMODIFIED_REGISTER THEN
STAC
QED

Theorem PENDING_ACCESSES_UNEXPANDED_REGISTER_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA:
!device_characteristics memory device1 device2.
  PENDING_ACCESSES_UNEXPANDED_REGISTER device1 device2 /\
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device1
  ==>
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device2
Proof
INTRO_TAC THEN
ETAC REGISTER_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC PENDING_ACCESSES_UNEXPANDED_REGISTER THEN
AITAC THEN
AITAC THEN
STAC
QED

Theorem PENDING_ACCESSES_CONDITIONALLY_EXPANDED_REGISTER_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA:
!R W memory device_characteristics device1 device2.
  R = device_characteristics.dma_characteristics.R /\
  W = device_characteristics.dma_characteristics.W /\
  PENDING_ACCESSES_CONDITIONALLY_EXPANDED_REGISTER R W memory device1 device2 /\
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device1
  ==>
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device2
Proof
INTRO_TAC THEN
ETAC REGISTER_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_REGISTER THEN
AITAC THEN
SPLIT_ASM_DISJS_TAC THENL
[
 AITAC THEN
 STAC
 ,
 PTAC REQUEST_CONDITION_R_W THEN
 PTAC REQUEST_CONDITION_R THEN
 STAC
]
QED

Theorem PENDING_ACCESSES_RESTRICTED_REGISTER_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA:
!R W memory device_characteristics device1 device2.
  R = device_characteristics.dma_characteristics.R /\
  W = device_characteristics.dma_characteristics.W /\
  PENDING_ACCESSES_RESTRICTED_REGISTER R W memory device1 device2 /\
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device1
  ==>
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device2
Proof
INTRO_TAC THEN
PTAC PENDING_ACCESSES_RESTRICTED_REGISTER THEN
SPLIT_ASM_DISJS_TAC THENL
[
 ITAC PENDING_ACCESSES_UNMODIFIED_REGISTER_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA THEN STAC
 ,
 ITAC PENDING_ACCESSES_UNEXPANDED_REGISTER_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA THEN STAC
 ,
 ITAC PENDING_ACCESSES_CONDITIONALLY_EXPANDED_REGISTER_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA THEN STAC
]
QED

Theorem PENDING_REGISTER_RELATED_MEMORY_REQUESTS_UNEXPANDED_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA:
!device_characteristics device1 device2 memory.
  LIST1_IN_LIST2 device2.dma_state.pending_register_related_memory_requests device1.dma_state.pending_register_related_memory_requests /\
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device1
  ==>
  REGISTER_REQUESTING_READ_ADDRESSES device_characteristics memory device2
Proof
INTRO_TAC THEN
ETAC REGISTER_REQUESTING_READ_ADDRESSES THEN
INTRO_TAC THEN
PTAC listsTheory.LIST1_IN_LIST2 THEN
RW_HYP_LEMMA_TAC listTheory.EVERY_MEM THEN
AITAC THEN
APP_SCALAR_TAC THEN
AITAC THEN
STAC
QED



Theorem READ_REQUEST_R_LEMMA:
!R memory is_valid new_requests requests read_requests addresses tag.
  REQUEST_VALIDATION_READABLE R memory is_valid /\
  requests = FILTER is_valid new_requests /\
  read_requests = FILTER READ_REQUEST requests /\
  MEM (request_read addresses tag) read_requests
  ==>
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
LRTAC THEN
LRTAC THEN
ETAC listTheory.MEM_FILTER THEN
ETAC REQUEST_VALIDATION_READABLE THEN
AIRTAC THEN
STAC
QED

(*
Theorem APPENDING_VALID_REQUESTS_IMPLIES_OLD_OR_READABLE_REQUEST_LEMMA:
!extended_requests old_requests new_requests R memory is_valid addresses tag.
  extended_requests = old_requests ++ FILTER is_valid new_requests /\
  REQEUST_VALIDATION_READABLE R memory is_valid /\
  MEM (request_read addresses tag) extended_requests
  ==>
  MEM (request_read addresses tag) old_requests \/
  EVERY (R memory) addresses
Proof
INTRO_TAC THEN
LRTAC THEN
ETAC listTheory.MEM_APPEND THEN
SPLIT_ASM_DISJS_TAC THENL
[
 STAC
 ,
 PTAC REQUEST_VALIDATION_READABLE THEN
 ETAC listTheory.MEM_FILTER THEN
 AITAC THEN
 STAC
]
QED
*)

Theorem EQ_READABLE_PRESERVES_DEVICE_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory1 memory2 device_characteristics device.
  R = device_characteristics.dma_characteristics.R /\
  R memory2 = R memory1 /\
  DEVICE_REQUESTING_READ_ADDRESSES device_characteristics memory1 device
  ==>
  DEVICE_REQUESTING_READ_ADDRESSES device_characteristics memory2 device
Proof
INTRO_TAC THEN
ETAC DEVICE_REQUESTING_READ_ADDRESSES THEN
CONJ_TAC THENL
[
 ETAC DMA_REQUESTING_READ_ADDRESSES THEN
 INTRO_TAC THEN
 AITAC THEN
 ETAC CHANNEL_REQUESTING_READ_ADDRESSES THEN
 INTRO_TAC THEN
 AITAC THEN
 STAC
 ,
 ETAC REGISTER_REQUESTING_READ_ADDRESSES THEN
 INTRO_TAC THEN
 AITAC THEN
 STAC
]
QED

Theorem PENDING_ACCESSES_RESTRICTED_PRESERVES_CHANNEL_R_LEMMA:
!R W memory channel1 channel2.
  PENDING_ACCESSES_RESTRICTED R W memory channel1 channel2 /\
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel1
  ==>
  CHANNEL_REQUESTING_READ_ADDRESSES R memory channel2
Proof
INTRO_TAC THEN
ETAC CHANNEL_REQUESTING_READ_ADDRESSES_EQ_OPERATIONS_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
ETAC PENDING_ACCESSES_RESTRICTED THEN
ITAC access_properties_fetching_bd_lemmasTheory.PENDING_ACCESSES_RESTRICTED_FETCHING_BD_PRESERVES_CHANNEL_R_LEMMA THEN
ITAC access_properties_updating_bd_lemmasTheory.PENDING_ACCESSES_RESTRICTED_UPDATING_BD_PRESERVES_CHANNEL_R_LEMMA THEN
ITAC access_properties_transferring_data_lemmasTheory.PENDING_ACCESSES_RESTRICTED_TRANSFERRING_DATA_PRESERVES_CHANNEL_R_LEMMA THEN
ITAC access_properties_writing_back_bd_lemmasTheory.PENDING_ACCESSES_RESTRICTED_WRITING_BACK_BD_PRESERVES_CHANNEL_R_LEMMA THEN
STAC
QED

Theorem ALL_DMA_CHANNELS_EQ_PENDING_ACCESSES_IMPLIES_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA:
!R memory (device1 : ('bd_type, 'channel_index_width, 'function_state_type, 'interconnect_address_width, 'internal_state_type, 'tag_width) device_state_type)
          (device2 : ('bd_type, 'channel_index_width, 'function_state_type, 'interconnect_address_width, 'internal_state_type, 'tag_width) device_state_type) channel_id.
  (!channel_id.
     (schannel device2 channel_id).pending_accesses = (schannel device1 channel_id).pending_accesses) /\
     CHANNEL_REQUESTING_READ_ADDRESSES R memory (schannel device1 channel_id)
  ==>
  CHANNEL_REQUESTING_READ_ADDRESSES R memory (schannel device2 channel_id)
Proof
INTRO_TAC THEN
ITAC access_properties_lemmasTheory.ALL_DMA_CHANNELS_EQ_PENDING_ACCESSES_IMPLIES_PENDING_ACCESSES_RESTRICTED_LEMMA THEN
ITAC PENDING_ACCESSES_RESTRICTED_PRESERVES_CHANNEL_R_LEMMA THEN
STAC
QED

Theorem ALL_DMA_CHANNELS_EQ_PENDING_ACCESSES_PRESERVES_DEVICE_REQUESTING_READ_ADDRESSES_LEMMA:
!device_characteristics memory (device1 : ('bd_type, 'channel_index_width, 'function_state_type, 'interconnect_address_width, 'internal_state_type, 'tag_width) device_state_type)
                               (device2 : ('bd_type, 'channel_index_width, 'function_state_type, 'interconnect_address_width, 'internal_state_type, 'tag_width) device_state_type).
  (!channel_id.
     (schannel device2 channel_id).pending_accesses = (schannel device1 channel_id).pending_accesses) /\
     device2.dma_state.pending_register_related_memory_requests = device1.dma_state.pending_register_related_memory_requests /\
  DEVICE_REQUESTING_READ_ADDRESSES device_characteristics memory device1
  ==>
  DEVICE_REQUESTING_READ_ADDRESSES device_characteristics memory device2
Proof
INTRO_TAC THEN
ETAC DEVICE_REQUESTING_READ_ADDRESSES THEN
CONJ_TAC THENL
[
 ETAC DMA_REQUESTING_READ_ADDRESSES THEN
 INTRO_TAC THEN
 LRTAC THEN
 AIRTAC THEN
 IRTAC ALL_DMA_CHANNELS_EQ_PENDING_ACCESSES_IMPLIES_CHANNEL_REQUESTING_READ_ADDRESSES_LEMMA THEN
 STAC
 ,
 IRTAC EQ_PENDING_REGIESTER_RELATED_MEMORY_REQUESTS_PRESERVES_REGISTER_REQUESTING_READ_ADDRESSES_LEMMA THEN STAC
]
QED

Theorem UPDATING_INTERNAL_STATE_PRESERVES_DEVICE_REQUESTING_READ_ADDRESSES_LEMMA:
!device1 device2 internal_state2 memory device_characteristics.
  device2 = device1 with dma_state := device1.dma_state with internal_state := internal_state2 /\
  DEVICE_REQUESTING_READ_ADDRESSES device_characteristics memory device1
  ==>
  DEVICE_REQUESTING_READ_ADDRESSES device_characteristics memory device2
Proof
INTRO_TAC THEN
IRTAC state_lemmasTheory.UPDATING_INTERNAL_STATE_PRESERVES_CHANNEL_STATES_PENDING_REGISTER_RELATED_MEMORY_REQUESTS_LEMMA THEN
ETAC read_propertiesTheory.DEVICE_REQUESTING_READ_ADDRESSES THEN
CONJ_TAC THENL
[
 ETAC read_propertiesTheory.DMA_REQUESTING_READ_ADDRESSES THEN
 RW_HYPS_TAC stateTheory.schannel THEN
 REWRITE_TAC [stateTheory.schannel] THEN
 STAC
 ,
 ETAC read_propertiesTheory.REGISTER_REQUESTING_READ_ADDRESSES THEN RLTAC THEN STAC
]
QED

val _ = export_theory();

